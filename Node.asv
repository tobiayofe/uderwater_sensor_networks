classdef Node
    properties
        id; coord;
        t_energy; % Node's initial energy
        k=1; residual_energy; pfn=[];
        pfn_num; nodes_in_range=[]; nodes_in_range_count;
        data_snt = []; data_rcv = struct(); data_rcv_count=0;
        ip_addr;
        routingdepth1; depth2;
  
    end
    
    methods
        function obj = Node()
            % obj.pfn_num = obj.pfn_count();
        end
        function [euclid] = node2sink_distance(x,y,z)
            euclid = euclidean_distance(x,y,z);
        end
        
        function [pfn] = pfn_select(nodes_depths)
            pfn = pfn_sn(nodes_depths);
        end
        
        function [vect_num] = vector_count(~,vect)
            counter=0;
            l = vect;
            for i=1:length(l)
                if l(i)>0
                    counter=counter+1;
                end
            end
            vect_num = counter;
        end
        
        function send = transmit(obj,data,app_port_num,pfn)
            if data=="broadcast_proto"
                proto_type = "UDP";
                encapsulation = Proto(proto_type);
                send = encapsulation.encapsulation_broadcast();
            else
                proto_type = "TCP";
                encapsulation = Proto(proto_type);
                segment_size = 20; % Bytes
                srcMac = obj.id;
                dstMac = pfn.id;
                srcIP = obj.ip_addr;
                dstIP = pfn.ip_addr;
                if startsWith(dstMac,"SSNN") || startsWith(dstMac,"UWSN")
                    hop = 0;
                else
                    hop = 1;
                end
                send = encapsulation.data_encapsulation(data,segment_size,...
                       app_port_num,srcIP,dstIP,hop,srcMac,dstMac);
                send = pfn.rcv_data(send);
            end
            
        end
        
        function [obj] = rcv_data(obj,rcvObj)
                dstIP = rcvObj.lay2(2);
                if str2double(rcvObj.lay1(2))==1 || rcvObj.lay1(2)=="1"
                    disp("Not the final destination");
                    disp("Routing to node with IP address" + dstIP);
                    obj.send(rcvObj);
                else
                    srcNode = rcvObj.lay2(1);
                    srcNode = strrep( srcNode , "." , "_" );
                    srcNode = "IP"+srcNode;
                    obj.data_rcv_count  = obj.data_rcv_count + 1;
                    obj.data_rcv = obj.data_rcv;struct(srcNode, rcvObj);
                end
        end
        
        function [obj] = ip_address(obj,node)
                obj.ip_addr = "192.168.1." + node;
            end
            
        function depth_info = info_request(obj)
            depth_info = [obj.id, obj.coord(3)];
        end

    end
end