clc; clear;
% Initialising base paper parameters
node_t_range=2000; % In metres
t_energy=20; % Node initial energy
total_net_area=[10000, 10000, 10000];%x=10km, y=10km, z=10km
transmission_power=50;%In Watts(W)
receive_power=158e-6;
frequency=12;%KHz
bandwidth=4;%KHz
signal_prop_speed=1500;%signal propagation speed = 1500m/s
rand_walk=2;%random walk = 2m/s
node_left_mov_prob=0.5;%Probability of node moving to the left
node_right_mov_prob=1-node_left_mov_prob;%Probability of node moving to the right
ack_packet_size=50;%Acknowledgement packet size in bits
n_req_size=50;% Size of N_request
data_rate=16;%Data size rate in Kilo bits per seconds (Kbps)
data_payload_size=72;%In Bytes
data_header_size=11;%In Bytes
max_pow_trans=90;%Maximum transmission power in dB
min_power_recv=10;%Minimum reception power in dB
% Application/interface initialisation
msg = "The underwater sensor node networks";
disp(msg); clear msg;
init = input("Press 1 to setup the sensor network: ");
switch init
    case 1
        press = input("Press 1 to set default values" + "\n" + "Press 2 to set UWSN initial values: ");
        if press == 1
        end
        if press == 2
            node_t_range = input("Enter the node transmission range in metres: ");
            t_energy= input("Enter the node initial transmission energy: ");
            disp("Enter the total net area of the UWSN in meters.\n: ");
            x_coord = input("Width: "); y_coord = input("Length: "); z_coord = input("Height: ");
            total_net_area=[x_coord, y_coord, z_coord];
            transmission_power= input("Enter transmission power in Watts(W): ");% In Watts(W)
            receive_power=input("Enter nodes reception power: ");
            frequency= input("Enter transmission frequency in KHz: ");
            bandwidth= input("Transmission bandwith in KHz: ");
            signal_prop_speed=input("Enter signal propagation speed in m/s: ");
            rand_walk=input("Random walk in m/s: ");
            ack_packet_size= input("Set the acknowledgement packet size: ");%Acknowledgement packet size in bits
            n_req_size=input("Set size of N_request packets: ");% Size of N_request
            data_rate=input("Set the data rate size in kilobits per seconds (Kbps): ");%Data size rate in Kilo bits per seconds (Kbps)
            data_payload_size=input("Set the payload size in bytes: ");%In Bytes
            data_header_size=input("Set the data header size in bytes: ");%In Bytes
            max_pow_trans=input("Enter the maximum transmission power for nodes in dB: ");%Maximum transmission power in dB
            min_power_recv=input("Enter the minimum power required for reception in node in dB: ");%Minimum reception power in dB
        end
        
    case 2
        disp("What are you to do");
    otherwise
        disp("Invalid number. Input values according to specified instruction.");
end

all_nodes = node_configurator();

for i=1:length(all_nodes)
    nodesExcludeSrcArr = all_nodes;
    nodesExcludeSrcArr(i).coord(3)=-Inf;
    all_nodes(i).pfn = pfn_sn(all_nodes(i).coord(3),nodesExcludeSrcArr);
    all_nodes(i).pfn_num = all_nodes(i).vector_count(all_nodes(i).pfn);
end

for a_nodes = 1:length(all_nodes)
    detected_nodes_id = zeros(1,111);
    for  nodes= 1:length(all_nodes(a_nodes).pfn)
        Dk=0;
        if  all_nodes(a_nodes).pfn(nodes)~=-Inf && ... 
            all_nodes(a_nodes).id ~= all_nodes(nodes).id
            node_x = [all_nodes(nodes).coord(1), all_nodes(a_nodes).coord(1)];
            node_y = [all_nodes(nodes).coord(2), all_nodes(a_nodes).coord(2)];
            node_z = [all_nodes(nodes).coord(3), all_nodes(a_nodes).coord(3)];
            Dk = euclidean_distance(node_x, node_y, node_z);
            
            if Dk <= node_t_range % node_t_range
                detected_nodes_id(1,nodes) = nodes;
            else
                detected_nodes_id(1,nodes) = -Inf;
            end
        end
    end
    node_in_range_id=[];
    for index=1:length(detected_nodes_id)
        if detected_nodes_id(index)>0
            node_in_range_id = [node_in_range_id,detected_nodes_id(index)];
        end
    end
    all_nodes(a_nodes).nodes_in_range = node_in_range_id;
    clear node_in_range_id;
end

% Count the number of nodes in range for each nodes
for i=1:length(all_nodes)
    all_nodes(i).nodes_in_range_count = all_nodes(i).vector_count(all_nodes(i).nodes_in_range);
end

resp = num2str(input("Do you wish to list out all the nodes" + ...
    " in the under water network environment?(Yes/No)"));
if lower(resp)~="no"
    resp="yes";
else
    resp = lower(resp);
end

if resp=="no"
else
    for i=1:length(all_nodes)
        if startsWith((all_nodes(i).id),"SSNN") || startsWith((all_nodes(i).id),"UWSN")
            disp("Node "+i+":- ****"+all_nodes(i).id+"****");
        else
            disp("Node "+i+":- "+all_nodes(i).id + ".      PFN neighbour: "+ ...
                all_nodes(i).nodes_in_range_count);
        end
    end
end
clear resp;

looper=false;
node_select=[];
while looper==false
    node_select = input("Enter the node you wish to transmit with - input a number between 1 and 100: ");
    if startsWith(all_nodes(node_select).id, "UWSN") || startsWith(all_nodes(node_select).id, "SSNN")
        disp("This is a sink node. Enter another number");
    else
        fprintf("You select node "+ node_select+"\r");
    end
    looper=true;
end
clear looper;
node_select = struct( "node_number",node_select,"node",all_nodes(node_select) );
%% Depth-based routing
disp("Obtaining first level depth information for node "+ node_select.node_number );
depth_based_pfn = node_transaction(all_nodes,node_select,"depth");
first_level_node_selected = find(arrayfun(@(node) isequal(node, depth_based_pfn), all_nodes));
disp("Node "+first_level_node_selected+ " selected");
disp("Node id: "+depth_based_pfn.id);
disp("Node IP address: "+depth_based_pfn.ip_addr);
disp("Node depth: "+depth_based_pfn.coord(3));
% Second-level depth information for selected source node (node_select.node_number)
disp("Obtaining second level depth information for node "+ node_select.node_number );
depth_based_pfn = struct("node_number",first_level_node_selected,...
                "node",all_nodes(arrayfun(@(node) isequal(node, depth_based_pfn), all_nodes)));
second_level_depth_based_pfn = node_transaction(all_nodes,depth_based_pfn,"depth");
second_level_node_selected = find(arrayfun(@(node) isequal(node, second_level_depth_based_pfn), all_nodes));
disp("Node "+second_level_node_selected+ " selected");
disp("Node id: "+second_level_depth_based_pfn.id);
disp("Node IP address: "+second_level_depth_based_pfn.ip_addr);
disp("Node depth: "+second_level_depth_based_pfn.coord(3));

%% Neighbour-based routing
disp("Obtaining first level depth information for node "+ node_select.node_number );
neighbour_based_pfn = node_transaction(all_nodes,node_select,"neighbour");
n_first_level_node_selected = find(arrayfun(@(node) isequal(node, neighbour_based_pfn), all_nodes));
neighbour_based_pfn = struct("node_number",n_first_level_node_selected,...
                        "node",all_nodes(n_first_level_node_selected));
disp("Node "+n_first_level_node_selected+ " selected");
disp("Node id: "+neighbour_based_pfn.id);
disp("Node IP address: "+neighbour_based_pfn.ip_addr);
disp("Node depth: "+neighbour_based_pfn.coord(3));
disp("Obtaining second level depth information for node "+ node_select.node_number );

second_level_based_pfn = node_transaction(all_nodes,neighbour_based_pfn,"neighbour");
% Obtain second-level neighbour information for selected node(node_select.node_number)

disp("What next!!!");



% Next line of actions
% Write code to select a node of interest
    % Obtain depth of node in range of source node - 1st contact node depth
    % Obtain the depth of node in range of 1st contact node - 2nd contact node
    % The 2nd contact node transmits its depth to 1st contact node which then transmits to
    % the source node
% Write code to simulates transmission of data from source node to destination
% Write code simulate transmission of data